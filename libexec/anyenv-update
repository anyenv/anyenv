#!/usr/bin/env bash
#
# Summary: Update ENVs or plugins
#
# Usage: anyenv u [-f|--force] [--without-plugin] [TARGET...]
#
#   -f/--force       Force update
#   -v/--verbose     Run verbosely
#   --without-plugin Update ENVs, but not update plugin of each ENVs
#
# See `anyenv envs` for a complete list of installed envs.
#
set -e
[ -z "$ANYENV_DEBUG" ] || set -x

# Provide anyenv completions
if [ "$1" = "--complete" ]; then
  echo --force
  echo --without-plugin
  echo anyenv
  exec anyenv envs --bare
fi

usage() {
  anyenv-help u 2>/dev/null
  [ -z "$1" ] || exit "$1"
}

parse_options () {
  OPTIONS=()
  ARGUMENTS=()
  local arg option index

  for arg in "$@"; do
    if [ "${arg:0:1}" = "-" ]; then
      if [ "${arg:1:1}" = "-" ]; then
        OPTIONS[${#OPTIONS[*]}]="${arg:2}"
      else
        index=1
        while option="${arg:$index:1}"; do
          [ -n "$option" ] || break
          OPTIONS[${#OPTIONS[*]}]="$option"
          index=$((index+1))
        done
      fi
    else
      ARGUMENTS[${#ARGUMENTS[*]}]="$arg"
    fi
  done
}

get_allenvs() {
  echo "anyenv $(anyenv-envs | tr '\n' ' ')"
}

set_env_and_plugin() {
  local target
  target="$1"

  case "$target" in
  /*-*)
    PLUGIN="${target#/}"
    ENV="${PLUGIN%%-*}"
    ;;
  /*)
    PLUGIN="${target#/}"
    ENV="${PLUGIN}"
    ;;
  */)
    ENV="${target%/}"
    PLUGIN="${ENV}"
    ;;
  */*)
    ENV="${target%/*}"
    PLUGIN="${target#*/}"
    ;;
  *-*)
    ENV="${target%%-*}"
    PLUGIN="${target}"
    ;;
  *)
    ENV="${target}"
    PLUGIN="${target}"
    ;;
  esac
}

set_target_dir() {
  if [ "$ENV" = anyenv ]; then
    ENV_DIR="$ANYENV_ROOT"
  else
    ENV_DIR="${ANYENV_ROOT}/envs/${ENV}"
  fi

  if [ "$ENV" = "$PLUGIN" ]; then
    TARGET_DIR="$ENV_DIR"
  else
    TARGET_DIR="${ENV_DIR}/plugins/${PLUGIN}"
  fi
}

print_use_forceopt() {
  echo "Failed to update '$1'. Use 'force' option." >&2
}

target_name() {
  if [ "$ENV" = "$PLUGIN" ]; then
    echo "$ENV"
  else
    echo "${ENV}/${PLUGIN}"
  fi
}

print_horizontal_separator() {
  if [ -n "$VERBOSE" ]; then
    echo
  fi
}

update_git() {
  if [ -d "${TARGET_DIR}/.git" ]; then
    if [ -n "$VERBOSE" ]; then
      echo "Updating '$(target_name)'..."
    fi

    # Check if current branch has tracking branch.
    if git -C "$TARGET_DIR" rev-parse --abbrev-ref '@{u}' >/dev/null 2>&1; then
      if [ -n "$FORCE" ]; then
        git -C "$TARGET_DIR" pull --force --ff --autostash
      else
        git -C "$TARGET_DIR" pull --force --ff-only || print_use_forceopt "$(target_name)"
      fi
    fi
  elif [ -d "${TARGET_DIR}" ]; then
    if [ -n "$VERBOSE" ]; then
      echo "Skipping '$(target_name)'; not git repo"
    fi
  else
    echo "anyenv: target '$(target_name)' does not exist" >&2
  fi

  print_horizontal_separator
}

update_env() {
  update_git
}

update_plugin() {
  update_git
}

update_plugins() {
  shopt -s nullglob
  local plugin_dir env
  plugin_dir="${TARGET_DIR}/plugins"
  env="$ENV"
  for plugin in $plugin_dir/*; do
    update_target "${env}/$(basename $plugin)"
  done
  shopt -u nullglob
}

update_target() {
  local target
  target="$1"

  set_env_and_plugin "$target"

  set_target_dir

  if [ "$ENV" = "$PLUGIN" ]; then
    update_env
    if [ -z "$WITHOUT_PLUGIN" ]; then
      update_plugins
    fi
  else
    update_plugin
  fi

}

parse_options "$@"
for option in "${OPTIONS[@]}"; do
  case "$option" in
  "h" | "help" )
    usage 0
    ;;
  "f" | "force" )
    FORCE=true
    ;;
  "v" | "verbose" )
    VERBOSE=true
    ;;
  "without-plugin" )
    WITHOUT_PLUGIN=true
    ;;
  * )
    echo "no such option: ${option}" >&2
    echo
    usage 1 >&2
    ;;
  esac
done

TARGETS=("${ARGUMENTS[@]}")
if [ "${#ARGUMENTS[@]}" -eq 0 ]; then
  TARGETS=($(get_allenvs))
fi

for arg in "${TARGETS[@]}"; do
  update_target "$arg"
done
